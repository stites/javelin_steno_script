//---------------------------------------------------------------------------
// Alternate Polyglot layout
//
// * Added settings layer to control RGB and embedded vs Gemini vs PloverHID.
// * Added numpad layer
// * Bottom row keys have been reorganized in QWERTY.
//---------------------------------------------------------------------------

// Steno
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Tab  |  S1  |   T  |   P  |   H  |  *1  |        |  *2  |   F  |   P  |   L  |   T  |    D   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Ctrl/Esc|  S2  |   K  |   W  |   R  |  *3  |        |  *4  |   R  |   B  |   G  |   S  |    Z   |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// | QWERTY |      |      |      |      |      |        |      |      |      |      |      |        |
// `----------------------+------+------+------|        |------+------+------+----------------------'
//                        |  #1  |   A  |   O  |        |   E  |   U  |  #2  |
//                        `--------------------'        `-------------------'
//
// * Tapping QWERTY key will switch to QWERTY mode
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when
//   releasing it. This will also give access to the Symbols, Navigation and Function layers by
//   pressing those keys on the QWERTY layer.
// * Command and Control activate a temporary qwerty layer

// QWERTY
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |   Tab  |   Q  |   W  |   E  |   R  |   T  |        |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Ctrl/Esc|   A  |   S  |   D  |   F  |   G  |        |   H  |   J  |   K  |   L  | ;  : |  '  "  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |Shf/Sten|   Z  |   X  |   C  |   V  |   B  |        |   N  |   M  | ,  < | .  > | /  ? | RShift |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        | Meta |  Alt |Nav/Sp|        | Space|  Sym |Fn/Ent|
//                        `--------------------'        `--------------------'
//
// For keys marked with two options, holding or pressing with other keys will cause the first option
// to be used, tapping briefly will trigger the second.
//
// Tapping right shift twice will turn on single word capitalization.
// Tapping right shift three times will turn on and off caps lock.

//
// Symbols
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |    `   |  1   |  2   |  3   |  4   |  5   |        |   6  |  7   |  8   |  9   |  0   |   =    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |    ~   |  !   |  @   |  #   |  $   |  %   |        |   ^  |  &   |  *   |  (   |  )   |   +    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  \   |  |   |  -   |  [   |  {   |        |   }  |  ]   |  _   |  .   |  /   |  Magic |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        | Meta |  Alt | Ctrl |        |      |      |      |
//                        `--------------------'        `--------------------'
//
// * Magic has a few different meanings:
//   - By itself, it does nothing.
//   - Following '-', it means '>'
//   - Following '(', it means '"'
//   - Following a '{' or '[', it means enter (newline)
//   - Following a digit, it means ','
//   - Following a comma or dot, it means space ' '

//
// Function
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |  F9  | F10  | F11  | F12  |      |        |      |      |      |      |      |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F5  |  F6  |  F7  |  F8  |      |        |      | Shift| Ctrl |  Alt |  GUI |        |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  F1  |  F2  |  F3  |  F4  |      |        |      |      |      |      |      |        |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        |      |      |      |        |      |      |      |
//                        `--------------------'        `--------------------'

//
// Navigation/Media
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |      |      |      |      |      |        | Vol+ | BkSp |   ↑  | Del  | PgUp |  Home  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift|      |        | Vol- |  ←   |   ↓  |   →  | PgDn |   End  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        | Mute |      |      |      |      |        |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        |      |NumPad|      |        | Space|      | Enter|
//                        `--------------------'        `--------------------'

//
// Numpad -- Pressing Alt + Nav at the same time
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |        |      |      |      |      |      |        |      |   7  |   8  |   9  |   *  |  Bksp  |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift|      |        |      |   4  |   5  |   6  |   -  |   +    |
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        |      |   1  |   2  |   3  |   /  |  Magic |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        |      |      |      |        | Space|   0  |   .  |
//                        `--------------------'        `--------------------'
//
// * Magic has the same meaning as the symbol layer.


//
// Settings - pressing both Sym and Fn together.
//
// ,-------------------------------------------.        ,-------------------------------------------.
// |StrkCnt |      |      |      |      |      |        |Speed+|      |Brght+| Sat+ | Hue+ |HueSprd+|
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |Embedd|Gemini|PloHID|      |        |Speed-|      |Brght-| Sat- | Hue- |HueSprd-|
// |--------+------+------+------+------+------|        |------+------+------+------+------+--------|
// |        |      |      |      |      |      |        |      |      |      |      |      |        |
// `----------------------+------+------+------|        |-------------------------------------------'
//                        |      |      |      |        |      |      |      |
//                        `--------------------'        `--------------------'
//


//---------------------------------------------------------------------------
// USB Scan code values.
//
// These constants are used with inbuilt functions:
//  * func pressScanCode(SC_xxx)
//  * func releaseScanCode(SC_xxx)
//  * func tapScanCode(SC_xxx)
//  * func isScanCodePressed(SC_xxx) var
//
//---------------------------------------------------------------------------

const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;
const SC_KP_COMMA = 0x85;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

// From Consumer Page (0x0c)
const SC_CONSUMER_PLAY = 0xa0;                // UsageId 0xb0
const SC_CONSUMER_PAUSE = 0xa1;               // UsageId 0xb1
const SC_CONSUMER_RECORD = 0xa2;              // UsageId 0xb2
const SC_CONSUMER_FAST_FORWARD = 0xa3;        // UsageId 0xb3
const SC_CONSUMER_REWIND = 0xa4;              // UsageId 0xb4
const SC_CONSUMER_SCAN_NEXT_TRACK = 0xa5;     // UsageId 0xb5
const SC_CONSUMER_SCAN_PREVIOUS_TRACK = 0xa6; // UsageId 0xb6
const SC_CONSUMER_STOP = 0xa7;                // UsageId 0xb7
const SC_CONSUMER_EJECT = 0xa8;               // UsageId 0xb8

const SC_CONSUMER_STOP_EJECT = 0xbc;          // UsageId 0xcc
const SC_CONSUMER_PLAY_PAUSE = 0xbd;          // UsageId 0xcd
const SC_CONSUMER_PLAY_SKIP = 0xbe;           // UsageId 0xce

const SC_CONSUMER_MUTE = 0xd2;                // UsageId 0xe2
const SC_CONSUMER_VOLUME_UP = 0xd9;           // UsageId 0xe9
const SC_CONSUMER_VOLUME_DOWN = 0xda;         // UsageId 0xea

//---------------------------------------------------------------------------
// javelin-steno steno key values.
//
// These constants are used with inbuilt functions:
//  * func pressStenoKey(SK_xxx)
//  * func releaseStenoKey(SK_xxx)
//  * func isStenoKeyPressed(SK_xxx) var
//
//---------------------------------------------------------------------------

const SK_NONE = -1;
const SK_S1 = 0;
const SK_S2 = 1;
const SK_TL = 2;
const SK_KL = 3;
const SK_PL = 4;
const SK_WL = 5;
const SK_HL = 6;
const SK_RL = 7;
const SK_A = 8;
const SK_O = 9;
const SK_STAR1 = 10;
const SK_STAR2 = 11;
const SK_STAR3 = 12;
const SK_STAR4 = 13;
const SK_E = 14;
const SK_U = 15;
const SK_FR = 16;
const SK_RR = 17;
const SK_PR = 18;
const SK_BR = 19;
const SK_LR = 20;
const SK_GR = 21;
const SK_TR = 22;
const SK_SR = 23;
const SK_DR = 24;
const SK_ZR = 25;
const SK_NUM1 = 26;
const SK_NUM2 = 27;
const SK_NUM3 = 28;
const SK_NUM4 = 29;
const SK_NUM5 = 30;
const SK_NUM6 = 31;
const SK_NUM7 = 32;
const SK_NUM8 = 33;
const SK_NUM9 = 34;
const SK_NUM10 = 35;
const SK_NUM11 = 36;
const SK_NUM12 = 37;
const SK_FUNCTION = 38;
const SK_POWER = 39;
const SK_RES1 = 40;
const SK_RES2 = 41;

//---------------------------------------------------------------------------
// Other functions:
//
//  * func releaseAll()
//    - releases all pressed scan codes and steno keys. This does NOT call
//      any release scripts.
//  * func pressAll()
//    - call all press scripts for buttons that are pressed.
//  * func isInPressAll() var
//    - returns non-zero if a pressAll is being processed.
//  * func isButtonPressed(buttonIndex) var
//    - Returns 1 if the physical button is pressed.
//  * func checkButtonState("01 10") var
//    - Returns if the current button state matches the string.
//    - 0 = not pressed, space = ignore, all others = pressed.
//      - The example string checks that:
//        - button 0 is off.
//        - button 1 is on.
//        - button 3 is on.
//        - button 4 is off.
//    - The string should be the same length as the number of buttons.
//  * func sendText("Example")
//    - Sends all of the key presses required to emit the specified string.
//    - e.g.,
//      - Press Shift
//      - Press E
//      - Release E
//      - Release Shift
//      - Press X
//      - Release X
//      - etc.
//  * func setRgb(id, r, g, b)
//    - For boards with rgb lights, sets an individual light to the r, g, b.
//  * func setHsv(id, h, s, v)
//    - For boards with rgb lights, sets an individua light to h, s, v.
//      - h = hue,        0-65536 represents 0°  - 360°
//      - s = saturation, 0-256   represents 0.0 - 1.0
//      - v = value,      0-255   represents 0.0 - 1.0
//  * func getTime() var
//    - Returns milliseconds since launch.
//  * func getLedStatus(id) var
//    - Returns whether the led statues is on. See LED_STATUS constants.
//
// releaseAll() and pressAll() are useful for changing modes/layers, e.g.:
//
// if (layer != SYMBOL_LAYER) {
//   releaseAll();
//   layer = SYMBOL_LAYER;
//   pressAll();
// }
//
// This will allow keys on the symbol layer to be pressed 'out-of-order' but
// still behave as expected.
//
// It is important that every pressAll() call in an onPress handler is guarded
// to prevent infinite recursion, since the onPress will be re-run even for the
// current key. The easiest way to do this is using isInPressAll() function.
//

const LED_STATUS_NUM_LOCK = 0;
const LED_STATUS_CAPS_LOCK = 1;
const LED_STATUS_SCROLL_LOCK = 2;
const LED_STATUS_COMPOSE = 3;
const LED_STATUS_KANA = 4;

//---------------------------------------------------------------------------

const INPUT_HINT_KEYBOARD = 0;
const INPUT_HINT_STENOGRAPHY = 1;

const SCRIPT_ID_KEYBOARD_LED_STATUS_UPDATE = 4;

//---------------------------------------------------------------------------
//
// Polyglot button layout:
//
// Button indexes
//
//      0   1   2   3   4   5  |   6   7   8   9  10  11
//     12  13  14  15  16  17  |  18  19  20  21  22  23
//     24  25  26  27  28  29  |  30  31  32  33  34  35
//                 36  37  38  |  39  40  41
//
// Bootsel Button (B button on the back of the Polyglot) is button 42.
//
//---------------------------------------------------------------------------
// Example global variable:
//   var layers = 0;

// Example local functions:
//
//   func useNavLayer() var {
//     return isButtonPressed(22);
//   }
//
//   func handlePress(stenoKey, navKey) {
//     if (useNavLayer()) {
//       pressScanCode(navKey);
//     } else {
//       pressStenoKey(stenoKey);
//     }
//   }
//
// Then the onPress handler could call handlePress(SK_S1 | KEY_STENO, SC_TAB);

//---------------------------------------------------------------------------
// The script needs to have onPress## and onRelease## functions for every
// physical button.
//---------------------------------------------------------------------------

const QWERTY_LAYER = 0;
const STENO_MASK = 1;
const SYMBOL_MASK = 2;
const FUNCTION_MASK = 4;
const NAV_MASK = 8;
const NUMPAD_MASK = 16;
const TEMPORARY_QWERTY_MASK = 32;

var layer = STENO_MASK;
var pressCount = 0;
var speed = 3;
var underglowMode = layer;

var hueSpread = 4;
var hueShift = 0;
var brightness = 5;
var saturation = 5;

// Fuzzy layers
//
// To avoid unintended navigation/function layer presses, the following
// sequence of events is interpreted as a press on the qwerty layer instead:
//
//     Layer key press        Key press        Layer key release
//            |                   |                     |
//   t ---------------------------------------------------------->
//           T0                  T1                    T2
//
// For this to happen, the time between T0 and T1 has to be less than 100 ms,
// and the time between T1 and T2 has to be less than 50 ms.
//
// Mechanics:
//  1. When a layer button is pressed, record a layerPressTimestamp.
//  2. When a key is pressed within 100ms and there is no recorded
//     keypress, then the layer and qwerty key are recorded. If there is
//     already a recorded keypress, press the deferred layer key and
//     immediately press the newer key. If a keypress occurs outside of 100ms,
//     process normally.
//  2. When the layer button is released, if there is a deferredQwertyKey
//     recorded timestamp within 50ms, then press the deferredQwertyKey then
//     the non-nav key. This is detected in release when NAV_MASK is on,
//     but isButtonPressed(38) returns false, and the key is emitted in the
//     release script for the layer key.
//  3. When a key is released, if there is a deferred key, press it first.
//  4. On timer expiration (after 50ms has elapsed), issue deferredQwertyKey.
const LAYER_PRESS_TO_KEY_PRESS_THRESHOLD = 100;
const KEY_PRESS_TO_LAYER_RELEASE_THRESHOLD = 50;
const NAV_BUTTON = 38;
const FUNCTION_BUTTON = 40;

var deferredLayerKey = 0;
var deferredQwertyKey = 0;
var navLayerPressTimestamp;
var functionLayerPressTimestamp;
var qwertyPressTimestamp;

const KEY_STENO = 0x200;
const KEY_SHIFT = 0x100;
const TAP_THRESHOLD = 200; // milliseconds for keys that have alternates

const TIMER_ID_RGB_UPDATE = 0;
const TIMER_ID_FUZZY_LAYER = 1;

var wordCaps = 0;
var lastPressLayer;
var lastPressKey;

const RGB_UPDATE_TIME = 20;

func init() {
  setLayer(layer);
  updateUnderglowRgb();

  startTimer(TIMER_ID_RGB_UPDATE, RGB_UPDATE_TIME, 1, @updateUnderglowRgb);
}

const SPEED_VALUES      = [[ 00 02 04 08 0c 10 18 20 30 ]];
const HUE_SPREAD_VALUES = [[ 00 10 20 28 30 38 40 48 50 ]];
const SATURATION_VALUES = [[ 00 20 40 50 60 68 70 78 80 ]];
const BRIGHTNESS_VALUES = [[ 00 08 10 20 30 40 50 60 80 ]];

func updateUnderglowRgbHueCycle(hShift, sat, spreadMultiplier, value) {
  for (var i = 0; i < 32; i = i + 1) {
    setHsv(
      i,
      spreadMultiplier*i + hShift,
      sat,
      value
    );
  }
}

func updateUnderglowRgbConstant(r, g, b) {
  var finalR = r * brightness >> 3;
  var finalG = g * brightness >> 3;
  var finalB = b * brightness >> 3;
  for (var i = 0; i < 32; i = i + 1) {
    setRgb(i, finalR, finalG, finalB);
  }
}

func updateUnderglowRgb() {
  if (underglowMode == 0) {
    updateUnderglowRgbConstant(64, 64, 64);
  } else {
    updateUnderglowRgbHueCycle(
      getTime() * SPEED_VALUES[speed] + hueShift,
      SATURATION_VALUES[saturation] * 2,
      HUE_SPREAD_VALUES[hueSpread] * 64,
      BRIGHTNESS_VALUES[brightness]
    );
  }
}

var lastEvent;
func sendEventUnique(event) {
  if (event == lastEvent) {
    return;
  }
  lastEvent = event;
  sendEvent(event);
}

func sendLayerEvent() {
  if (isSettingsLayer()) {
    // sendEventUnique("layer: settings");
  } else if (layer & NUMPAD_MASK) {
    // sendEventUnique("layer: numpad");
  } else if (layer & NAV_MASK) {
    // sendEventUnique("layer: navigation");
  } else if (layer & FUNCTION_MASK) {
    // sendEventUnique("layer: function");
  } else if (layer & SYMBOL_MASK) {
    // sendEventUnique("layer: symbol");
  } else if (layer & STENO_MASK) {
    // var mode = getParameter("steno_mode");
    // if (mode == "gemini")  {
    //   sendEventUnique("layer: steno_gemini");
    // } else if(mode == "plover_hid") {
    //   sendEventUnique("layer: steno_plover_hid");
    // } else {
    //   sendEventUnique("layer: steno");
    // }
    sendEventUnique("layer: steno");
  } else {
    sendEventUnique("layer: qwerty");
  }
}

func setLayer(value) {
  releaseAll();
  layer = value;
  sendLayerEvent();

  setInputHint(value == STENO_MASK ? INPUT_HINT_STENOGRAPHY : INPUT_HINT_KEYBOARD);
}

func isModifierKey(key) var {
  return SC_L_CTRL <= key && key <= SC_R_META;
}

func isWordCapsModifierKey(key) var {
  var v = key | 4;
  return v == SC_R_SHIFT || key == SC_R_ALT;
}

func isWordKey(key) var {
  return SC_A <= key && key <= SC_Z;
}

func isDigitKey(key) var {
  return SC_1 <= key && key <= SC_0;
}

func press(key) {
  if (key == SC_NONE || key == SK_NONE) {
    return;
  }

  if (isInPressAll() && !isModifierKey(key)) {
    return;
  }

  lastPressLayer = layer;
  lastPressKey = key;
  pressCount = pressCount + 1;

  if (key & KEY_STENO) {
    pressStenoKey(key & 0xff);
  } else {
    if (wordCaps) {
      if (isWordKey(key) && (key & KEY_SHIFT) == 0) {
        key = key | KEY_SHIFT;
      } else if (!isWordCapsModifierKey(key)
          && key != (SC_MINUS | KEY_SHIFT)
          && key != SC_BACKSPACE
          && !isDigitKey(key)) {
        wordCaps = 0;
      }
    }
    if (key & KEY_SHIFT) {
      pressScanCode(SC_L_SHIFT);
    }
    var scanCode = key & 0xff;
    pressScanCode(scanCode);
  }
}

func release(key) {
  if (key == SC_NONE || key == SK_NONE) {
    return;
  }

  if (key & KEY_STENO) {
    releaseStenoKey(key & 0xff);
  } else {
    if (wordCaps) {
      if (isWordKey(key)) {
        key = key | KEY_SHIFT;
      }
    }
    if (key & KEY_SHIFT) {
      releaseScanCode(SC_L_SHIFT);
    }
    var scanCode = key & 0xff;
    releaseScanCode(scanCode);
  }
}

func tap(key) {
  press(key);
  release(key);
}

func isSettingsLayer() var {
  return (layer & (SYMBOL_MASK | FUNCTION_MASK)) == (SYMBOL_MASK | FUNCTION_MASK);
}

func fuzzyLayerTimeout() {
  press(deferredLayerKey);
  deferredLayerKey = 0;
  deferredQwertyKey = 0;
}

func handlePress(buttonIndex, qwertyKey, stenoKey, symbolsKey, functionKey, navKey, numPadKey) {
  if (isSettingsLayer()) {
    return;
  } else if (layer & NUMPAD_MASK) {
    press(numPadKey);
  } else if (layer & NAV_MASK) {
    if (deferredLayerKey) {
      press(deferredLayerKey);

      deferredLayerKey = 0;
      deferredQwertyKey = 0;
      stopTimer(TIMER_ID_FUZZY_LAYER);

      press(navKey);
    } else if (getTime() - navLayerPressTimestamp < LAYER_PRESS_TO_KEY_PRESS_THRESHOLD) {
      deferredLayerKey = navKey;
      deferredQwertyKey = qwertyKey;
      startTimer(TIMER_ID_FUZZY_LAYER, KEY_PRESS_TO_LAYER_RELEASE_THRESHOLD, 0, @fuzzyLayerTimeout);
    } else {
      press(navKey);
    }
  } else if (layer & FUNCTION_MASK) {
    if (deferredLayerKey) {
      press(deferredLayerKey);

      deferredLayerKey = 0;
      deferredQwertyKey = 0;
      stopTimer(TIMER_ID_FUZZY_LAYER);

      press(functionKey);
    } else if (getTime() - functionLayerPressTimestamp < LAYER_PRESS_TO_KEY_PRESS_THRESHOLD) {
      deferredLayerKey = functionKey;
      deferredQwertyKey = qwertyKey;
      startTimer(TIMER_ID_FUZZY_LAYER, KEY_PRESS_TO_LAYER_RELEASE_THRESHOLD, 0, @fuzzyLayerTimeout);
    } else {
      press(functionKey);
    }
  } else if (layer & SYMBOL_MASK) {
    press(symbolsKey);
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    press(qwertyKey);
  } else if (layer & STENO_MASK) {
    press(stenoKey);
  } else {
    press(qwertyKey);
  }
}
func handleRelease(qwertyKey, stenoKey, symbolsKey, functionKey, navKey, numPadKey) {
  if (isSettingsLayer()) {
    return;
  } else if (layer & NUMPAD_MASK) {
    release(numPadKey);
  } else if (layer & NAV_MASK) {
    if (deferredLayerKey) {
      if (isButtonPressed(NAV_BUTTON)) {
        press(deferredLayerKey);
        deferredLayerKey = 0;
        deferredQwertyKey = 0;
      }
    }

    release(navKey);
  } else if (layer & FUNCTION_MASK) {
    if (deferredLayerKey) {
      if (isButtonPressed(FUNCTION_BUTTON)) {
        press(deferredLayerKey);
        deferredLayerKey = 0;
        deferredQwertyKey = 0;
      }
    }

    release(functionKey);
  } else if (layer & SYMBOL_MASK) {
    release(symbolsKey);
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    release(qwertyKey);
  } else if (layer & STENO_MASK) {
    release(stenoKey);
  } else {
    release(qwertyKey);
  }
}

func onPairingHoldTimer() {
  startBlePairing();
}

func onPress0() {
  if (layer & STENO_MASK) {
      setInputHint(INPUT_HINT_KEYBOARD);
  }
  handlePress(0, SC_TAB, SC_TAB, SC_GRAVE, SC_NONE, SC_NONE, SC_NONE);
}
func onRelease0() {
  handleRelease(SC_TAB, SC_TAB, SC_GRAVE, SC_NONE, SC_NONE, SC_NONE);

  if (layer & STENO_MASK) {
      setInputHint(INPUT_HINT_STENOGRAPHY);
  }
}

func onPress1() { handlePress(1, SC_Q, SK_S1 | KEY_STENO, SC_1, SC_F9, SC_NONE, SC_NONE); }
func onRelease1() { handleRelease(SC_Q, SK_S1 | KEY_STENO, SC_1, SC_F9, SC_NONE, SC_NONE); }

func onPress2() { handlePress(2, SC_W, SK_TL | KEY_STENO, SC_2, SC_F10, SC_NONE, SC_NONE); }
func onRelease2() { handleRelease(SC_W, SK_TL | KEY_STENO, SC_2, SC_F10, SC_NONE, SC_NONE); }

func onPress3() { handlePress(3, SC_E, SK_PL | KEY_STENO, SC_3, SC_F11, SC_NONE, SC_NONE); }
func onRelease3() { handleRelease(SC_E, SK_PL | KEY_STENO, SC_3, SC_F11, SC_NONE, SC_NONE); }

func onPress4() { handlePress(4, SC_R, SK_HL | KEY_STENO, SC_4, SC_F12, SC_NONE, SC_NONE); }
func onRelease4() { handleRelease(SC_R, SK_HL | KEY_STENO, SC_4, SC_F12, SC_NONE, SC_NONE); }

func onPress5() { handlePress(5, SC_T, SK_STAR1 | KEY_STENO, SC_5, SC_NONE, SC_NONE, SC_NONE); }
func onRelease5() { handleRelease(SC_T, SK_STAR1 | KEY_STENO, SC_5, SC_NONE, SC_NONE, SC_NONE); }

func onPress6() {
  handlePress(6, SC_Y, SK_STAR2 | KEY_STENO, SC_6, SC_NONE, SC_CONSUMER_VOLUME_UP, SC_NONE);

  if (isSettingsLayer()) {
    if (speed < 8) {
      // Adjust hue to avoid glitches.
      hueShift = hueShift + getTime() * (SPEED_VALUES[speed] - SPEED_VALUES[speed + 1]);

      speed = speed + 1;
    }
  }
}
func onRelease6() { handleRelease(SC_Y, SK_STAR2 | KEY_STENO, SC_6, SC_NONE, SC_CONSUMER_VOLUME_UP, SC_NONE); }

func onPress7() { handlePress(7, SC_U, SK_FR | KEY_STENO, SC_7, SC_NONE, SC_BACKSPACE, SC_KP_7); }
func onRelease7() { handleRelease(SC_U, SK_FR | KEY_STENO, SC_7, SC_NONE, SC_BACKSPACE, SC_KP_7); }

func onPress8() {
  handlePress(8, SC_I, SK_PR | KEY_STENO, SC_8, SC_NONE, SC_UP, SC_KP_8);

  if (isSettingsLayer()) {
    if (brightness < 8) {
      brightness = brightness + 1;
    }
  }
}
func onRelease8() { handleRelease(SC_I, SK_PR | KEY_STENO, SC_8, SC_NONE, SC_UP, SC_KP_8); }

func onPress9() {
  handlePress(9, SC_O, SK_LR | KEY_STENO, SC_9, SC_NONE, SC_DELETE, SC_KP_9);

  if (isSettingsLayer()) {
    if (saturation < 8) {
      saturation = saturation + 1;
    }
  }
}
func onRelease9() { handleRelease(SC_O, SK_LR | KEY_STENO, SC_9, SC_NONE, SC_DELETE, SC_KP_9); }

func onPress10() {
  handlePress(10, SC_P, SK_TR | KEY_STENO, SC_0, SC_NONE, SC_PAGE_UP, SC_KP_ASTERISK);

  if (isSettingsLayer()) {
    hueShift = hueShift - 0x800;
  }
}
func onRelease10() { handleRelease(SC_P, SK_TR | KEY_STENO, SC_0, SC_NONE, SC_PAGE_UP, SC_KP_ASTERISK); }

func onPress11() {
  handlePress(11, SC_BACKSPACE, SK_DR | KEY_STENO, SC_EQUAL, SC_NONE, SC_HOME, SC_BACKSPACE);

  if (isSettingsLayer()) {
    if (hueSpread < 8) {
      hueSpread = hueSpread + 1;
    }
  }
}
func onRelease11() { handleRelease(SC_BACKSPACE, SK_DR | KEY_STENO, SC_EQUAL, SC_NONE, SC_HOME, SC_BACKSPACE); }

// 2nd row

var timer12;
var pressCount12;
var wasSteno12;
func onPress12() {
  if (!isInPressAll()) {
    wasSteno12 = layer == STENO_MASK;
    if (wasSteno12) {
      setLayer(layer | TEMPORARY_QWERTY_MASK);
    }
  }
  handlePress(12, SC_L_CTRL, SC_NONE, SC_GRAVE | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE);
  update24();

  if (!isInPressAll()) {
    timer12 = getTime();
    pressCount12 = pressCount;
  }
}
func onRelease12() {
  if (wasSteno12) {
    setLayer(STENO_MASK);
  } else {
    handleRelease(SC_L_CTRL, SC_NONE, SC_GRAVE | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE);
    update24();
  }

  if ((layer == 0 || wasSteno12)
      && pressCount12 == pressCount
      && getTime() - timer12 < TAP_THRESHOLD) {
    tap(SC_ESC);
  }
}

func onPress13() { handlePress(13, SC_A, SK_S2 | KEY_STENO, SC_1 | KEY_SHIFT, SC_F5, SC_L_META, SC_L_META); }
func onRelease13() { handleRelease(SC_A, SK_S2 | KEY_STENO, SC_1 | KEY_SHIFT, SC_F5, SC_L_META, SC_L_META); }

func onPress14() {
  handlePress(14, SC_S, SK_KL | KEY_STENO, SC_2 | KEY_SHIFT, SC_F6, SC_L_ALT, SC_L_ALT);

  if (isSettingsLayer()) {
    console("set_steno_mode embedded");
  }
}
func onRelease14() { handleRelease(SC_S, SK_KL | KEY_STENO, SC_2 | KEY_SHIFT, SC_F6, SC_L_ALT, SC_L_ALT); }

func onPress15() {
  handlePress(15, SC_D, SK_WL | KEY_STENO, SC_3 | KEY_SHIFT, SC_F7, SC_L_CTRL, SC_L_CTRL);

  if (isSettingsLayer()) {
    console("set_steno_mode gemini");
  }
}
func onRelease15() { handleRelease(SC_D, SK_WL | KEY_STENO, SC_3 | KEY_SHIFT, SC_F7, SC_L_CTRL, SC_L_CTRL); }

func onPress16() {
  handlePress(16, SC_F, SK_RL | KEY_STENO, SC_4 | KEY_SHIFT, SC_F8, SC_L_SHIFT, SC_L_SHIFT);

  if (isSettingsLayer()) {
    console("set_steno_mode plover_hid");
  }
}
func onRelease16() { handleRelease(SC_F, SK_RL | KEY_STENO, SC_4 | KEY_SHIFT, SC_F8, SC_L_SHIFT, SC_L_SHIFT); }

func onPress17() { handlePress(17, SC_G, SK_STAR3 | KEY_STENO, SC_5 | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE); }
func onRelease17() { handleRelease(SC_G, SK_STAR3 | KEY_STENO, SC_5 | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE); }

func onPress18() {
  handlePress(18, SC_H, SK_STAR4 | KEY_STENO, SC_6 | KEY_SHIFT, SC_NONE, SC_CONSUMER_VOLUME_DOWN, SC_NONE);

  if (isSettingsLayer()) {
    if (speed > 0) {
      // Adjust hue to avoid glitches.
      hueShift = hueShift + getTime() * (SPEED_VALUES[speed] - SPEED_VALUES[speed - 1]);

      speed = speed - 1;
    }
  }
}
func onRelease18() { handleRelease(SC_H, SK_STAR4 | KEY_STENO, SC_6 | KEY_SHIFT, SC_NONE, SC_CONSUMER_VOLUME_DOWN, SC_NONE); }

func onPress19() { handlePress(19, SC_J, SK_RR | KEY_STENO, SC_7 | KEY_SHIFT, SC_L_SHIFT, SC_LEFT, SC_KP_4); }
func onRelease19() { handleRelease(SC_J, SK_RR | KEY_STENO, SC_7 | KEY_SHIFT, SC_L_SHIFT, SC_LEFT, SC_KP_4); }

func onPress20() {
  handlePress(20, SC_K, SK_BR | KEY_STENO, SC_8 | KEY_SHIFT, SC_L_CTRL, SC_DOWN, SC_KP_5);

  if (isSettingsLayer()) {
    if (brightness > 0) {
      brightness = brightness - 1;
    }
  }
}
func onRelease20() { handleRelease(SC_K, SK_BR | KEY_STENO, SC_8 | KEY_SHIFT, SC_L_CTRL, SC_DOWN, SC_KP_5); }

func onPress21() {
  handlePress(21, SC_L, SK_GR | KEY_STENO, SC_9 | KEY_SHIFT, SC_L_ALT, SC_RIGHT, SC_KP_6);

  if (isSettingsLayer()) {
    if (saturation > 0) {
      saturation = saturation - 1;
    }
  }
}
func onRelease21() { handleRelease(SC_L, SK_GR | KEY_STENO, SC_9 | KEY_SHIFT, SC_L_ALT, SC_RIGHT, SC_KP_6); }

func onPress22() {
  handlePress(22, SC_SEMICOLON, SK_SR | KEY_STENO, SC_0 | KEY_SHIFT, SC_L_META, SC_PAGE_DOWN, SC_KP_MINUS);

  if (isSettingsLayer()) {
    hueShift = hueShift + 0x800;
  }
}
func onRelease22() { handleRelease(SC_SEMICOLON, SK_SR | KEY_STENO, SC_0 | KEY_SHIFT, SC_L_META, SC_PAGE_DOWN, SC_KP_MINUS); }

func onPress23() {
  handlePress(23, SC_APOSTROPHE, SK_ZR | KEY_STENO, SC_EQUAL | KEY_SHIFT, SC_NONE, SC_END, SC_KP_PLUS);

  if (isSettingsLayer()) {
    if (hueSpread > 0) {
      hueSpread = hueSpread - 1;
    }
  }
}
func onRelease23() { handleRelease(SC_APOSTROPHE, SK_ZR | KEY_STENO, SC_EQUAL | KEY_SHIFT, SC_NONE, SC_END, SC_KP_PLUS); }

// 3rd row

var timer24;
var wasSteno24;
var pressCount24;
var wasShiftPressed24;
func update24() {
  if (isButtonPressed(24)
        && (isButtonPressed(12 /*CTRL*/) || isButtonPressed(36 /*META*/))
        && (layer == QWERTY_LAYER || (layer & TEMPORARY_QWERTY_MASK))) {
    press(SC_L_SHIFT);
    wasShiftPressed24 = 1;
  } else if (wasShiftPressed24) {
    release(SC_L_SHIFT);
    wasShiftPressed24 = 0;
  }
}
func onPress24() {
  if (isInPressAll()) {
    update24();
    return;
  }
  wasSteno24 = layer == STENO_MASK;
  wasShiftPressed24 = (layer == QWERTY_LAYER || (layer & TEMPORARY_QWERTY_MASK));
  if (wasSteno24) {
    setLayer(layer ^ STENO_MASK);
    pressCount24 = pressCount;
    pressAll();
  } else {
    if (wasShiftPressed24) {
      press(SC_L_SHIFT);
    }
    pressCount24 = pressCount;
  }
  timer24 = getTime();
}
func onRelease24() {
  if (wasShiftPressed24) {
    release(SC_L_SHIFT);
  }

  if (wasSteno24) {
    // If the keypress was in steno mode, and other keys were pressed, or it
    // was a long press, drop immediately back to steno mode, and drop all masks.
    if (pressCount24 != pressCount || layer || getTime() - timer24 >= TAP_THRESHOLD) {
      setLayer(STENO_MASK);
    }
  } else if (layer == 0 && pressCount24 == pressCount
      && getTime() - timer24 < TAP_THRESHOLD
      && checkButtonState("000000000000000000000000000000000000000000")) {
    // A tap of the key turns on steno mode.
    // Automatically turn off word caps when entering steno mode.
    wordCaps = 0;

    setLayer(layer | STENO_MASK);
  }
  underglowMode = layer & 1;
  updateUnderglowRgb();
}

func onPress25() { handlePress(25, SC_Z, SC_NONE, SC_BACKSLASH, SC_F1, SC_NONE, SC_NONE); }
func onRelease25() { handleRelease(SC_Z, SC_NONE, SC_BACKSLASH, SC_F1, SC_NONE, SC_NONE); }

func onPress26() { handlePress(26, SC_X, SC_NONE, SC_BACKSLASH | KEY_SHIFT, SC_F2, SC_NONE, SC_NONE); }
func onRelease26() { handleRelease(SC_X, SC_NONE, SC_BACKSLASH | KEY_SHIFT, SC_F2, SC_NONE, SC_NONE); }

func onPress27() { handlePress(27, SC_C, SC_NONE, SC_MINUS, SC_F3, SC_NONE, SC_NONE); }
func onRelease27() { handleRelease(SC_C, SC_NONE, SC_MINUS, SC_F3, SC_NONE, SC_NONE); }

func onPress28() { handlePress(28, SC_V, SC_NONE, SC_L_BRACKET, SC_F4, SC_NONE, SC_NONE); }
func onRelease28() { handleRelease(SC_V, SC_NONE, SC_L_BRACKET, SC_F4, SC_NONE, SC_NONE); }

func onPress29() { handlePress(29, SC_B, SC_NONE, SC_L_BRACKET | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE); }
func onRelease29() { handleRelease(SC_B, SC_NONE, SC_L_BRACKET | KEY_SHIFT, SC_NONE, SC_NONE, SC_NONE); }

func onPress30() { handlePress(30, SC_N, SC_NONE, SC_R_BRACKET | KEY_SHIFT, SC_NONE, SC_CONSUMER_MUTE, SC_NONE); }
func onRelease30() { handleRelease(SC_N, SC_NONE, SC_R_BRACKET | KEY_SHIFT, SC_NONE, SC_CONSUMER_MUTE, SC_NONE); }

func onPress31() { handlePress(31, SC_M, SC_NONE, SC_R_BRACKET, SC_NONE, SC_NONE, SC_KP_1); }
func onRelease31() { handleRelease(SC_M, SC_NONE, SC_R_BRACKET, SC_NONE, SC_NONE, SC_KP_1); }

func onPress32() { handlePress(32, SC_COMMA, SC_NONE, SC_MINUS | KEY_SHIFT, SC_NONE, SC_NONE, SC_KP_2); }
func onRelease32() { handleRelease(SC_COMMA, SC_NONE, SC_MINUS | KEY_SHIFT, SC_NONE, SC_NONE, SC_KP_2); }

func onPress33() { handlePress(33, SC_DOT, SC_NONE, SC_DOT, SC_NONE, SC_NONE, SC_KP_3); }
func onRelease33() { handleRelease(SC_DOT, SC_NONE, SC_DOT, SC_NONE, SC_NONE, SC_KP_3); }

func onPress34() { handlePress(34, SC_SLASH, SC_NONE, SC_SLASH, SC_NONE, SC_NONE, SC_KP_SLASH); }
func onRelease34() { handleRelease(SC_SLASH, SC_NONE, SC_SLASH, SC_NONE, SC_NONE, SC_KP_SLASH); }

var timer35;
var releaseTimer35;
var tapCount35;
var pressCount35;
var capsPressed;
var magicKey35;
func onPress35() {
  // Magic key handling.
  magicKey35 = SC_NONE;
  if (layer & (SYMBOL_MASK | NUMPAD_MASK)) {
    if (lastPressKey == SC_MINUS) {
      magicKey35 = SC_DOT | KEY_SHIFT;
    } else if (lastPressKey == (SC_9 | KEY_SHIFT)) {
      magicKey35 = SC_APOSTROPHE | KEY_SHIFT;
    } else if (SC_1 <= lastPressKey && lastPressKey <= SC_0) {
      magicKey35 = SC_COMMA;
    } else if (SC_KP_1 <= lastPressKey && lastPressKey <= SC_KP_0) {
      magicKey35 = SC_COMMA;
    } else if ((lastPressKey | KEY_SHIFT) == (SC_L_BRACKET | KEY_SHIFT)) {
      magicKey35 = SC_ENTER;
    } else if (lastPressKey == SC_COMMA || lastPressKey == SC_DOT || lastPressKey == SC_KP_DOT) {
      magicKey35 = SC_SPACE;
    }
  }

  handlePress(35, SC_R_SHIFT, SC_NONE, magicKey35, SC_NONE, SC_NONE, magicKey35);

  capsPressed = 0;
  if (layer == 0) {
    timer35 = getTime();
    pressCount35 = pressCount;
    if (timer35 - releaseTimer35 < TAP_THRESHOLD) {
      tapCount35 = tapCount35 + 1;
      if (tapCount35 == 1) {
        wordCaps = wordCaps ^ 1;
      } else if (tapCount35 == 2) {
        pressScanCode(SC_CAPS);
        wordCaps = 0;
        capsPressed = 1;
      }
    } else {
      tapCount35 = 0;
    }
  }
}
func onRelease35() {
  handleRelease(SC_R_SHIFT, SC_NONE, magicKey35, SC_NONE, SC_NONE, magicKey35);

  if (capsPressed) {
    capsPressed = 0;
    releaseScanCode(SC_CAPS);
  }

  if (layer == 0 && pressCount35 == pressCount && getTime() - timer35 < TAP_THRESHOLD) {
    releaseTimer35 = getTime();
  }
}

// 4th row

var wasSteno36;
func onPress36() {
  if (!isInPressAll()) {
    wasSteno36 = layer == STENO_MASK;
    if (wasSteno36) {
      setLayer(layer | TEMPORARY_QWERTY_MASK);
    }
  }
  handlePress(36, SC_L_META, SC_NONE, SC_L_META, SC_NONE, SC_NONE, SC_NONE);
  update24();
}
func onRelease36() {
  handleRelease(SC_L_META, SC_NONE, SC_L_META, SC_NONE, SC_NONE, SC_NONE);
  update24();
  if (wasSteno36) {
    setLayer(STENO_MASK);
  }
}

var timer37;
var pressCount37;
func onPress37() {
  handlePress(37, SC_L_ALT, SK_A | KEY_STENO, SC_L_ALT, SC_NONE, SC_NONE, SC_NONE);
  if (!isInPressAll()) {
    timer37 = getTime();
    pressCount37 = pressCount37;

  }
  if ((layer & (NAV_MASK | NUMPAD_MASK))  == NAV_MASK) {
    setLayer(layer | NUMPAD_MASK);
    pressAll();
  }
}
func onRelease37() {
  handleRelease(SC_L_ALT, SK_A | KEY_STENO, SC_L_ALT, SC_NONE, SC_NONE, SC_NONE);
  if (!isInPressAll() && layer == 0 && pressCount37 == pressCount && getTime() - timer37 < TAP_THRESHOLD) {
    tap(SC_ENTER);
  }
  if (layer & NUMPAD_MASK) {
    setLayer(layer ^ NUMPAD_MASK);
    pressAll();
  }
}

var pressCount38;
func onPress38() {
  handlePress(38, SC_NONE, SK_O | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE, SC_NONE);

  if (layer == 0) {
    setLayer(layer | NAV_MASK);
    pressAll();
    navLayerPressTimestamp = getTime();
    pressCount38 = pressCount;
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    press(SC_SPACE);
  }
}
func onRelease38() {
  handleRelease(SC_NONE, SK_O | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE, SC_NONE);
  if (layer & NAV_MASK) {
    var startPressCount = pressCount;

    setLayer(layer & ~(NAV_MASK | NUMPAD_MASK));
    pressAll();

    if (layer == 0 && pressCount38 == startPressCount && getTime() - navLayerPressTimestamp < TAP_THRESHOLD) {
      tap(SC_SPACE);
    }
    tap(deferredQwertyKey);
    deferredLayerKey = 0;
    deferredQwertyKey = 0;
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    release(SC_SPACE);
  }
}

func onPress39() { handlePress(39, SC_SPACE, SK_E | KEY_STENO, SC_NONE, SC_NONE, SC_SPACE, SC_SPACE); }
func onRelease39() { handleRelease(SC_SPACE, SK_E | KEY_STENO, SC_NONE, SC_NONE, SC_SPACE, SC_SPACE); }

func onPress40() {
  handlePress(40, SC_NONE, SK_U | KEY_STENO, SC_NONE, SC_NONE, SC_NONE, SC_KP_0);
  if ((layer | FUNCTION_MASK) == FUNCTION_MASK
      || layer == (STENO_MASK | TEMPORARY_QWERTY_MASK)) {
    setLayer(layer | SYMBOL_MASK);
    pressAll();
  }
}
func onRelease40() {
  handleRelease(SC_NONE, SK_U | KEY_STENO, SC_L_CTRL, SC_NONE, SC_NONE, SC_KP_0);
  if (layer & SYMBOL_MASK) {
    setLayer(layer ^ SYMBOL_MASK);
    pressAll();
  }
}

var pressCount41;
func onPress41() {
  handlePress(41, SC_NONE, SK_NUM2 | KEY_STENO, SC_NONE, SC_NONE, SC_ENTER, SC_KP_DOT);
  if ((layer | SYMBOL_MASK) == SYMBOL_MASK) {
    pressCount = pressCount + 1;
    setLayer(layer | FUNCTION_MASK);
    pressAll();
    functionLayerPressTimestamp = getTime();
    pressCount41 = pressCount;
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    press(SC_ENTER);
  }
}
func onRelease41() {
  handleRelease(SC_NONE, SK_NUM2 | KEY_STENO, SC_NONE, SC_NONE, SC_ENTER, SC_KP_DOT);
  if (layer & FUNCTION_MASK) {
    var startPressCount = pressCount;

    setLayer(layer ^ FUNCTION_MASK);
    pressAll();

    if (layer == 0) {
      if (pressCount41 == startPressCount && getTime() - functionLayerPressTimestamp < TAP_THRESHOLD) {
        tap(SC_ENTER);
      }

      tap(deferredQwertyKey);
    }
    deferredLayerKey = 0;
    deferredQwertyKey = 0;
  } else if (layer & TEMPORARY_QWERTY_MASK) {
    release(SC_ENTER);
  }
}

func onPress42() { console("launch_bootloader"); }
func onRelease42() {}
